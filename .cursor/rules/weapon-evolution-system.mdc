---
alwaysApply: false
description: "Vampire Survivors-like 게임에서 무기에 진화를 추가하는 가이드라인"
---

# 무기 진화 시스템 가이드

## 개요

무기 진화 시스템은 플레이어가 보유한 무기가 최고 레벨에 도달하고 특정 조건을 만족할 때 더 강력한 무기로 진화할 수 있게 해주는 시스템입니다.

## 시스템 구조

### 1. 핵심 클래스들

#### WeaponEvolutionData

- **역할**: 진화 조건과 결과를 정의하는 ScriptableObject
- **주요 필드**:
  - `originalWeapon`: 진화할 원본 무기
  - `evolvedWeapon`: 진화 후 무기
  - `requiredGears`: 진화에 필요한 Gear 아이템들
  - `minRequiredGearCount`: 필요한 최소 Gear 개수 (0이면 모든 requiredGears 필요)
  - `evolutionDescription`: 진화 설명
  - `evolutionIcon`: 진화 UI 아이콘

#### WeaponEvolutionManager

- **역할**: 진화 시스템의 중앙 관리자
- **주요 기능**:
  - 진화 가능한 무기 목록 조회
  - 진화 실행
  - 진화 UI 표시

#### EvolutionUI

- **역할**: 진화 UI 관리
- **주요 기능**:
  - 진화 후보 무기들 표시
  - 진화 실행 처리

### 2. 진화 조건

#### 기본 조건

1. **무기 최고 레벨 달성**: 원본 무기가 `maxLevel`에 도달해야 함
2. **Gear 아이템 보유**: `requiredGears`에 지정된 Gear 아이템들을 보유해야 함

#### 조건 검사 로직

```csharp
// WeaponEvolutionData.CanEvolve() 메서드에서 검사
// 1. 원본 무기가 최고 레벨인지 확인
// 2. 필요한 Gear 아이템들을 보유하고 있는지 확인
// 3. minRequiredGearCount에 따라 필요한 개수 확인
```

### 3. 진화 과정

#### 진화 실행 단계

1. **기존 무기 제거**: 원본 무기와 Weapon 컴포넌트 제거
2. **진화된 무기 생성**: 새로운 Item과 Weapon 컴포넌트 생성
3. **플레이어에 추가**: 진화된 무기를 플레이어 아이템 목록에 추가
4. **UI 갱신**: AcquiredItemsUI 업데이트
5. **효과음 재생**: 진화 완료 효과음 재생

## 사용법

### 1. 진화 데이터 생성

#### Unity 에디터에서 생성

1. **Project 창**에서 우클릭
2. **Create > Scriptable Objects > Weapon Evolution Data** 선택
3. **원본 무기**와 **진화된 무기** 설정
4. **필요한 Gear 아이템들** 추가
5. **진화 설명** 작성

#### 예시 설정

```
Original Weapon: "Weapon-무기"
Evolved Weapon: "Evolved Weapon-진화된 무기"
Required Gears: ["Speed Gear-속도 장비", "Damage Gear-데미지 장비"]
Min Required Gear Count: 1
Evolution Description: "속도와 데미지 장비를 조합하여 더 강력한 무기로 진화"
```

### 2. 진화 매니저 설정

#### GameManager에서 설정

1. **GameManager**의 `weaponEvolutionManager` 필드에 WeaponEvolutionManager 할당
2. **evolutionDataList**에 생성한 진화 데이터들 추가

### 3. 진화 UI 설정

#### 레벨업 UI에 진화 버튼 추가

1. **LevelUp** UI에 진화 버튼 추가
2. **evolutionButton**과 **evolutionButtonText** 필드 연결
3. 진화 가능한 무기가 있을 때만 버튼 표시

#### 진화 UI 프리팹 생성

1. **EvolutionUI** 컴포넌트가 있는 UI 프리팹 생성
2. **EvolutionCandidateUI** 프리팹 생성
3. **WeaponEvolutionManager**의 `evolutionUIPrefab` 설정

### 4. 진화 시스템 접근

#### 레벨업 UI에서 진화

- 레벨업 시 진화 버튼이 표시됨
- 진화 가능한 무기 개수가 버튼에 표시됨
- 버튼 클릭 시 진화 UI 표시

#### 코드에서 직접 진화

```csharp
// 진화 가능한 무기 목록 조회
List<EvolutionCandidate> candidates = WeaponEvolutionManager.Instance.GetEvolvableWeapons(player);

// 진화 실행
WeaponEvolutionManager.Instance.EvolveWeapon(originalItem, evolutionData);

// 진화 UI 표시
WeaponEvolutionManager.Instance.ShowEvolutionUI();
```

## 구현 가이드

### 1. 새로운 진화 추가

#### 단계별 과정

1. **진화 데이터 생성**: WeaponEvolutionData 에셋 생성
2. **진화된 무기 데이터 생성**: WeaponData 에셋 생성
3. **진화된 무기 로직 생성**: WeaponBase 상속 클래스 생성
4. **진화된 무기 액션 생성**: Action_Weapon 에셋 생성
5. **진화 매니저에 등록**: evolutionDataList에 추가

#### 예시: "Weapon" → "Evolved Weapon" 진화

```csharp
// 1. WeaponEvolutionData 생성
WeaponEvolutionData evolutionData = ScriptableObject.CreateInstance<WeaponEvolutionData>();
evolutionData.originalWeapon = weaponData;
evolutionData.evolvedWeapon = evolvedWeaponData;
evolutionData.requiredGears.Add(speedGearData);
evolutionData.requiredGears.Add(damageGearData);
evolutionData.minRequiredGearCount = 1;

// 2. WeaponEvolutionManager에 등록
WeaponEvolutionManager.Instance.evolutionDataList.Add(evolutionData);
```

### 2. 진화 조건 커스터마이징

#### Gear 조건 추가/수정

```csharp
// WeaponEvolutionData에서 설정
public List<GearData> requiredGears = new List<GearData>();
public int minRequiredGearCount = 0;
```

#### 복잡한 조건 추가

```csharp
// WeaponEvolutionData.CanEvolve() 메서드 확장
public bool CanEvolve(Player player)
{
    // 기본 조건 검사
    if (!base.CanEvolve(player)) return false;

    // 추가 조건 검사
    if (player.level < 10) return false; // 레벨 조건
    if (player.kill < 100) return false; // 킬 수 조건

    return true;
}
```

### 3. 진화 효과 커스터마이징

#### 진화 시 특별한 효과 추가

```csharp
// WeaponEvolutionManager.EvolveWeapon() 메서드 확장
public bool EvolveWeapon(Item originalItem, WeaponEvolutionData evolutionData)
{
    // 기본 진화 로직
    bool success = base.EvolveWeapon(originalItem, evolutionData);

    if (success)
    {
        // 추가 효과
        GameManager.instance.player.speed.AddModifier(new StatModifier(0.2f, StatModifierType.Additive, evolutionData));

        // 특별한 이펙트 재생
        PlayEvolutionEffect();
    }

    return success;
}
```

## 주의사항

### 1. 데이터 무결성

- **진화 데이터 검증**: 원본 무기와 진화된 무기가 올바르게 연결되었는지 확인
- **Gear 데이터 검증**: 필요한 Gear 아이템들이 실제로 존재하는지 확인
- **중복 진화 방지**: 같은 무기가 여러 진화 경로를 가지지 않도록 주의

### 2. 성능 최적화

- **진화 조건 캐싱**: 자주 호출되는 진화 조건 검사를 캐싱
- **UI 업데이트 최적화**: 불필요한 UI 갱신 방지
- **메모리 관리**: 진화 UI 오브젝트의 적절한 정리

### 3. 사용자 경험

- **진화 조건 표시**: 사용자가 진화 조건을 명확히 알 수 있도록 UI 제공
- **진화 미리보기**: 진화 후 무기의 능력치를 미리 확인할 수 있도록 표시
- **진화 실패 피드백**: 진화 조건을 만족하지 않을 때 명확한 피드백 제공

## 확장 가능성

### 1. 다단계 진화

- **2단계 진화**: 진화된 무기가 다시 진화할 수 있도록 확장
- **진화 트리**: 여러 진화 경로를 가지는 시스템

### 2. 동적 진화 조건

- **게임 진행도 기반**: 게임 시간, 레벨 등에 따른 조건
- **플레이어 행동 기반**: 특정 무기 사용 횟수, 킬 수 등

### 3. 진화 효과 다양화

- **스탯 보너스**: 진화 시 특정 스탯 증가
- **특수 능력**: 진화된 무기만의 고유한 능력
- **시각적 효과**: 진화된 무기의 특별한 시각 효과

---
